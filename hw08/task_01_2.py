#1. Определение количества различных подстрок с использованием хеш-функции. Пусть дана строка S длиной N.
# Например, состоящая только из маленьких латинских букв. Требуется найти количество различных подстрок в этой строке.

#эту задачку можно решить без встроенной ф-ции hash, а собирать хэш-функцию вручную (как Вы показывали на уроке)
#при этом можно использовать красивое св-во этой хэш-функции: хэш отрезка = разности хэшей конца и начала, деленный на P(I)
# H[I..J] = (H[J] - H[I])/P(I)

def search_all_substr(s):
    n = len(s)

# считаем все степени p
    P = 31 #количество букв в латинском алфавите - кодируем по основанию 31
    p_pow = []
    p_pow.append(1)
    for i in range(1, n):
        p_pow.append(p_pow[i - 1] * P)

# считаем хэши от всех префиксов
    h = []
    for i in range(n):
        h.append((ord(s[i]) - ord('a') + 1) * p_pow[i])
        if i:
            h[i] += h[i - 1]

    result = 0
# перебираем длину подстроки
    for l in range(1, n):
#ищем ответ для текущей длины
# получаем хэши для всех подстрок длины l
        hs = []
        for i in range(n-l+1):
            cur_h = h[i+l-1]
            if i:
                cur_h -= h[i-1]
    # приводим все хэши к одной степени
            cur_h *= p_pow[n-i-1]
            hs.append(cur_h)
    # считаем количество различных хэшей
        hs = set(hs)
        result += len(hs)
    return result


print(search_all_substr("papa"))
