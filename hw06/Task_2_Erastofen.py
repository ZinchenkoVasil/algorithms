#Наша цель - измерить затраты памяти для моей реализации алгоритма Эрастофена

import show_size
def erastofen(number=100):
    assert number <= 5761455, 'Слишком большой аргумент'
    pi_func = {4: 10,
               25: 10 ** 2,
               168: 10 ** 3,
               1229: 10 ** 4,
               9592: 10 ** 5,
               78498: 10 ** 6,
               664579: 10 ** 7,
               5761455: 10 ** 8,
               }
    for key in pi_func.keys():
        if number <= key:
            size = pi_func[key]
            break
    a = [i for i in range(size)]
    size_a = show_size.show_size(a)
    print("Размер начального списка: ", size_a)
    print(f'type = {type(a)}, size = {size_a}')
   # вторым элементом является единица, которую не считают простым числом
   # забиваем ее нулем.
    a[1] = 0
    b = []
    m = 2  # замена на 0 начинается с 3-го элемента (первые два уже нули)
    while len(b) < number:  # перебор всех элементов до заданного числа
        if a[m] != 0:  # если он не равен нулю, то
            j = m * 2  # увеличить в два раза (текущий элемент - простое число)
            #добавить простое число в массив простых чисел
            b.append(a[m])
            while j < size:
                a[j] = 0  # заменить на 0
                j = j + m  # перейти в позицию на m больше
        m += 1

    size_b = show_size.show_size(b)
    print("Размер результирующего списка: ", size_b)
    print(f'type = {type(b)}, size = {size_b}')
    common_size = size_a + size_b
    print("Суммарный размер обоих списков: ", common_size)

    return b[number - 1]

erastofen(100000)

#Размер начального списка:  200698494
#type = <class 'list'>, size = 200698494
#Размер результирующего списка:  2005212
#type = <class 'list'>, size = 2005212
#Суммарный размер обоих списков:  202703706




